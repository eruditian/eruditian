/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PatternRouteImport } from './routes/pattern'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SequenceTypeRouteImport } from './routes/sequence.$type'
import { Route as MemorySizeRouteImport } from './routes/memory.$size'

const PatternRoute = PatternRouteImport.update({
  id: '/pattern',
  path: '/pattern',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SequenceTypeRoute = SequenceTypeRouteImport.update({
  id: '/sequence/$type',
  path: '/sequence/$type',
  getParentRoute: () => rootRouteImport,
} as any)
const MemorySizeRoute = MemorySizeRouteImport.update({
  id: '/memory/$size',
  path: '/memory/$size',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/pattern': typeof PatternRoute
  '/memory/$size': typeof MemorySizeRoute
  '/sequence/$type': typeof SequenceTypeRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/pattern': typeof PatternRoute
  '/memory/$size': typeof MemorySizeRoute
  '/sequence/$type': typeof SequenceTypeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/pattern': typeof PatternRoute
  '/memory/$size': typeof MemorySizeRoute
  '/sequence/$type': typeof SequenceTypeRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/pattern' | '/memory/$size' | '/sequence/$type'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/pattern' | '/memory/$size' | '/sequence/$type'
  id: '__root__' | '/' | '/pattern' | '/memory/$size' | '/sequence/$type'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PatternRoute: typeof PatternRoute
  MemorySizeRoute: typeof MemorySizeRoute
  SequenceTypeRoute: typeof SequenceTypeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/pattern': {
      id: '/pattern'
      path: '/pattern'
      fullPath: '/pattern'
      preLoaderRoute: typeof PatternRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sequence/$type': {
      id: '/sequence/$type'
      path: '/sequence/$type'
      fullPath: '/sequence/$type'
      preLoaderRoute: typeof SequenceTypeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/memory/$size': {
      id: '/memory/$size'
      path: '/memory/$size'
      fullPath: '/memory/$size'
      preLoaderRoute: typeof MemorySizeRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PatternRoute: PatternRoute,
  MemorySizeRoute: MemorySizeRoute,
  SequenceTypeRoute: SequenceTypeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
